# .github/workflows/release-main.yml
name: Release - main
on:
  push:
    branches: [main]

jobs:
  release-frontend:
    name: Release Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - name: semantic-release (frontend)
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-backend:
    name: Release Backend (microservices)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        svc:
          - { name: gateway,      path: "backend/gateway" }
          - { name: auth-service, path: "backend/auth-service" }
          - { name: event-service, path: "backend/event-service" }
          - { name: ticket-service, path: "backend/ticket-service" }
          - { name: payment-service, path: "backend/payment-service" }
          - { name: notification-service, path: "backend/notification-service" }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # Plugins de semantic-release instalados en la RAÍZ (no hay package.json en micros Java)
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install semantic-release plugins (root)
        run: npm ci

      - name: semantic-release (${{ matrix.svc.name }})
        working-directory: ${{ matrix.svc.path }}
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Docker release images (GHCR)
    runs-on: ubuntu-latest
    needs: [release-frontend, release-backend]
    strategy:
      matrix:
        svc:
          - { name: frontend, path: "frontend", image: "ticketera-frontend", tagprefix: "frontend-v" }
          - { name: gateway,  path: "backend/gateway", image: "ticketera-gateway", tagprefix: "gateway-v" }
          - { name: auth,     path: "backend/auth-service", image: "ticketera-auth-service", tagprefix: "auth-service-v" }
          - { name: event,    path: "backend/event-service", image: "ticketera-event-service", tagprefix: "event-service-v" }
          - { name: ticket,   path: "backend/ticket-service", image: "ticketera-ticket-service", tagprefix: "ticket-service-v" }
          - { name: payment,  path: "backend/payment-service", image: "ticketera-payment-service", tagprefix: "payment-service-v" }
          - { name: notif,    path: "backend/notification-service", image: "ticketera-notification-service", tagprefix: "notification-service-v" }
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read version tag for this module
        id: ver
        shell: bash
        run: |
          set -e
          # Trae el último tag que matchee el prefijo de este módulo
          TAG=$(git tag --list '${{ matrix.svc.tagprefix }}*' --sort=-v:refname | head -n1 || true)
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          if [ -z "$TAG" ]; then
            echo "version=" >> $GITHUB_OUTPUT
            echo "No hay tag para ${{ matrix.svc.tagprefix }}, se saltea build."
            exit 0
          fi
          VER="${TAG#${{ matrix.svc.tagprefix }}}"
          echo "version=${VER}" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.svc.name }}
        if: steps.ver.outputs.version != ''
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.svc.path }}
          file: ${{ matrix.svc.path }}/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.svc.image }}:v${{ steps.ver.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.svc.image }}:latest
