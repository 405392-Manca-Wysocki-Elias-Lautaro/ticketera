name: Release (pre) - develop

on:
  push:
    branches: [develop]

jobs:
  prerelease-frontend:
    name: Pre-release Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        run: npm ci
      - name: semantic-release (frontend)
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prerelease-backend:
    name: Pre-release Backend (microservices)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        svc:
          - { name: gateway,      path: "backend/gateway",               tag: "gateway-v*" }
          - { name: auth-service, path: "backend/auth-service",          tag: "auth-service-v*" }
          - { name: event-service, path: "backend/event-service",        tag: "event-service-v*" }
          - { name: ticket-service, path: "backend/ticket-service",      tag: "ticket-service-v*" }
          - { name: payment-service, path: "backend/payment-service",    tag: "payment-service-v*" }
          - { name: notification-service, path: "backend/notification-service", tag: "notification-service-v*" }
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Instala semantic-release y plugins en la RAÍZ (no hay package.json en los micros Java)
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install semantic-release plugins (root)
        run: npm ci

      # Detecta si cambió la carpeta del micro desde su último tag propio
      - name: Detect changes (${{ matrix.svc.name }})
        id: changed
        shell: bash
        run: |
          set -e
          LAST_TAG=$(git tag --list '${{ matrix.svc.tag }}' --sort=-v:refname | head -n1 || true)
          echo "LAST_TAG=$LAST_TAG"
          if [ -z "$LAST_TAG" ]; then
            echo "No hay tags previos para ${{ matrix.svc.name }} -> marcar changed=true"
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if git diff --name-only "$LAST_TAG"...HEAD | grep -q '^${{ matrix.svc.path }}/'; then
            echo "Hay cambios en ${{ matrix.svc.path }} desde $LAST_TAG"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Sin cambios en ${{ matrix.svc.path }} desde $LAST_TAG"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: semantic-release (${{ matrix.svc.name }})
        if: steps.changed.outputs.changed == 'true'
        working-directory: ${{ matrix.svc.path }}
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-prerelease:
    name: Docker prerelease images (GHCR)
    runs-on: ubuntu-latest
    needs: [prerelease-frontend, prerelease-backend]
    strategy:
      matrix:
        svc:
          - { name: frontend, path: "frontend", image: "ticketera-frontend" }
          - { name: gateway,  path: "backend/gateway", image: "ticketera-gateway" }
          - { name: auth,     path: "backend/auth-service", image: "ticketera-auth-service" }
          - { name: event,    path: "backend/event-service", image: "ticketera-event-service" }
          - { name: ticket,   path: "backend/ticket-service", image: "ticketera-ticket-service" }
          - { name: payment,  path: "backend/payment-service", image: "ticketera-payment-service" }
          - { name: notif,    path: "backend/notification-service", image: "ticketera-notification-service" }
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: vars
        shell: bash
        run: |
          SHA=${GITHUB_SHA::7}
          echo "sha=${SHA}" >> $GITHUB_OUTPUT
          # canal 'next' para develop
          echo "tag1=${{ github.ref_name }}-next-${SHA}" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.svc.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.svc.path }}
          file: ${{ matrix.svc.path }}/Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.svc.image }}:${{ steps.vars.outputs.tag1 }}
