services:
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:16-alpine}
    container_name: ticketera-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ:-America/Argentina/Cordoba}
    volumes:
      - ${PGDATA_VOL:-ticketera_prod_pgdata}:/var/lib/postgresql/data
      # Si es un volumen NUEVO y querés bootstrap de schemas/permisos/pgcrypto:
      # - ./infra/postgres/prod/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [ backend ]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_data:/var/log/rabbitmq
    ports:
      - "5672:5672"     # puerto AMQP (comunicación entre microservicios)
      - "15672:15672"   # panel web http://localhost:15672
    networks: [ backend ]
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 3s
      retries: 20

  # Frontend estático servido por Node 'serve'
  frontend:
    build:
      context: ./frontend
    networks: [ frontend_net ]

  # API Gateway WebFlux (Spring Cloud Gateway)
  gateway:
    build:
      context: ./backend/gateway
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_PROFILES_ACTIVE: prod
      # CORS_ALLOWED_ORIGINS: "http://localhost:5173,http://localhost:8081"
    depends_on: [ auth, events, tickets, payments, notifications, orders ]
    networks: [ backend, frontend_net ]

  # === Microservicios ===
  
  auth:
    build:
      context: ./backend/auth-service
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: auth
      FLYWAY_TABLE: flyway_history_auth
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks: [ backend ]

  events:
    build:
      context: ./backend/event-service
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: events
      FLYWAY_TABLE: flyway_history_events
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks: [ backend ]

  tickets:
    build:
      context: ./backend/ticket-service
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: tickets
      FLYWAY_TABLE: flyway_history_tickets
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks: [ backend ]

  payments:
    build:
      context: ./backend/payment-service
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: payments
      FLYWAY_TABLE: flyway_history_payments
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks: [ backend ]

  notifications:
    build:
      context: ./backend/notification-service
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: notifications
      FLYWAY_TABLE: flyway_history_notifications
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks: [ backend ]

  orders:
    build:
      context: ./backend/order-service
      dockerfile: ./Dockerfile
      args:
        JDK_IMAGE: ${JDK_IMAGE}
        RUNTIME_IMAGE: eclipse-temurin:17-jre
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SCHEMA: orders
      FLYWAY_TABLE: flyway_history_orders
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks: [ backend ]

networks:
  backend:
  frontend_net:

volumes:
  ticketera_prod_pgdata:
