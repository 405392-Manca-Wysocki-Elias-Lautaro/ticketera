services:
  postgres:
    image: ${POSTGRES_IMAGE:-postgres:16-alpine}
    container_name: ticketera-postgres-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ticketera_app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_pass_123}
      POSTGRES_DB: ${POSTGRES_DB:-ticketera_dev}
      TZ: ${TZ:-America/Argentina/Cordoba}
    ports:
      - "${PG_PORT:-5432}:5432"
    volumes:
      - ${PGDATA_VOL:-ticketera_dev_pgdata}:/var/lib/postgresql/data
      - ./infra/postgres/dev/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [ backend ]

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks: [ backend ]

  frontend-dev:
    container_name: frontend-dev
    image: ${NODE_IMAGE:-node:20}
    working_dir: /app
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0 --port 5173"
    volumes:
      - ./frontend:/app
    ports:
      - "5173:5173"
    networks: [ frontend_net, backend ]

  gateway-dev:
    container_name: gateway-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
    volumes:
      - ./backend/gateway:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVICES_AUTH_BASE_URL: http://auth-dev:8080
      SERVICES_EVENT_BASE_URL: http://event-dev:8080
      SERVICES_TICKET_BASE_URL: http://ticket-dev:8080
      SERVICES_PAYMENT_BASE_URL: http://payment-dev:8080
      SERVICES_NOTIFICATION_BASE_URL: http://notification-dev:8080
      SERVICES_ORDER_BASE_URL: http://order-dev:8080
    # depends_on:
    #   - auth-dev
    #   - event-dev
    #   - ticket-dev
    #   - payment-dev
    #   - notification-dev
    #   - order-dev
    networks: [backend]
    ports:
      - "8080:8080"
      - "5005:5005"

  auth-dev:
    container_name: auth-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
          
    volumes:
      - ./backend/auth-service:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${AUTH_DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: ${AUTH_DB_SCHEMA:-auth-dev}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${AUTH_DB_SCHEMA:-auth-dev}
      SPRING_FLYWAY_CREATE_SCHEMAS: "true"
    depends_on: [postgres]
    networks: [backend]
    ports:
      - "8082:8080"
      - "5006:5005"

  event-dev:
    container_name: event-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
    volumes:
      - ./backend/event-service:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${EVENT_DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: ${EVENT_DB_SCHEMA:-event-dev}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${EVENT_DB_SCHEMA:-event-dev}
      SPRING_FLYWAY_CREATE_SCHEMAS: "true"
    depends_on: [postgres]
    networks: [backend]
    ports:
      - "8083:8080"
      - "5007:5005"

  ticket-dev:
    container_name: ticket-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
    volumes:
      - ./backend/ticket-service:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${TICKET_DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: ${TICKET_DB_SCHEMA:-ticket-dev}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${TICKET_DB_SCHEMA:-ticket-dev}
      SPRING_FLYWAY_CREATE_SCHEMAS: "true"
    depends_on: [postgres]
    networks: [backend]
    ports:
      - "8084:8080"
      - "5010:5005"

  payment-dev:
    container_name: payment-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
    volumes:
      - ./backend/payment-service:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${PAYMENT_DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: ${PAYMENT_DB_SCHEMA:-payment-dev}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${PAYMENT_DB_SCHEMA:-payment-dev}
      SPRING_FLYWAY_CREATE_SCHEMAS: "true"
    depends_on: [postgres]
    networks: [backend]
    ports:
      - "8085:8080"
      - "5009:5005"

  notification-dev:
    container_name: notification-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
    volumes:
      - ./backend/notification-service:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${NOTIFICATION_DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: ${NOTIFICATION_DB_SCHEMA:-notification-dev}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${NOTIFICATION_DB_SCHEMA:-notification-dev}
      SPRING_FLYWAY_CREATE_SCHEMAS: "true"
    depends_on: [postgres]
    networks: [backend]
    ports:
      - "8086:8080"
      - "5008:5005"
  
  order-dev:
    container_name: order-dev
    image: maven:3.9.8-eclipse-temurin-17
    working_dir: /workspace
    command:
      - sh
      - -lc
      - |
        set -e
        mvn -q -Pdev -DskipTests dependency:go-offline
        exec mvn -q -Pdev \
          -Dspring-boot.run.profiles=dev \
          -Dspring-boot.run.jvmArguments="-XX:MaxRAMPercentage=75.0" \
          -Dspring-boot.run.fork=false \
          spring-boot:run
    volumes:
      - ./backend/order-service:/workspace
      - m2cache:/root/.m2
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=${ORDER_DB_SCHEMA},public
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_FLYWAY_SCHEMAS: ${ORDER_DB_SCHEMA:-order-dev}
      SPRING_FLYWAY_DEFAULT_SCHEMA: ${ORDER_DB_SCHEMA:-order-dev}
      SPRING_FLYWAY_CREATE_SCHEMAS: "true"
    depends_on: [postgres]
    networks: [backend]
    ports:
      - "8087:8080"
      - "5011:5005"

networks:
  backend:
  frontend_net:

volumes:
  ticketera_dev_pgdata:
  m2cache: